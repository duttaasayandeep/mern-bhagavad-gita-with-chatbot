{"ast":null,"code":"var _jsxFileName = \"C:\\\\fullstack-bhagavad-gita\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Chatbot.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chatbot.css'; // optional: create a CSS file for chatbot-specific styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Hello, I am the Bhagavad Gita Chatbot. How may I help you today?'\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Default parameters for the chatbot API request\n  const defaultParams = {\n    model_name: \"llama-3.3-70b-versatile\",\n    // use one of the allowed models\n    model_provider: \"Groq\",\n    // or \"Groq\" if preferred\n    system_prompt: \"You are a helpful assistant answering queries about Bhagavad Gita.\",\n    allow_search: false\n  };\n  const sendMessage = async () => {\n    if (!inputText.trim()) return;\n\n    // Append user message to conversation\n    const newMessages = [...messages, {\n      sender: 'user',\n      text: inputText\n    }];\n    setMessages(newMessages);\n    setInputText('');\n    setLoading(true);\n    try {\n      // Prepare the request body; here we send all messages as a list of strings\n      const requestBody = {\n        ...defaultParams,\n        messages: newMessages.map(m => m.text)\n      };\n      const response = await axios.post(\"http://localhost:5001/chat\", requestBody);\n      const botResponse = response.data.response || \"Sorry, I did not understand that.\";\n      setMessages([...newMessages, {\n        sender: 'bot',\n        text: botResponse\n      }]);\n    } catch (error) {\n      console.error('Error sending message:', error.response ? error.response.data : error.message);\n      setMessages([...newMessages, {\n        sender: 'bot',\n        text: \"Error: Unable to get response.\"\n      }]);\n    }\n    setLoading(false);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message here...\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"wB/ncHHX8QD29DaJbljhnMh0pbo=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","inputText","setInputText","loading","setLoading","defaultParams","model_name","model_provider","system_prompt","allow_search","sendMessage","trim","newMessages","requestBody","map","m","response","post","botResponse","data","error","console","message","handleKeyDown","e","key","className","children","msg","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["C:/fullstack-bhagavad-gita/frontend/src/components/Chatbot.js"],"sourcesContent":["// frontend/src/components/Chatbot.js\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './Chatbot.css'; // optional: create a CSS file for chatbot-specific styles\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: 'bot', text: 'Hello, I am the Bhagavad Gita Chatbot. How may I help you today?' }\r\n  ]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Default parameters for the chatbot API request\r\n  const defaultParams = {\r\n    model_name: \"llama-3.3-70b-versatile\",      // use one of the allowed models\r\n    model_provider: \"Groq\",       // or \"Groq\" if preferred\r\n    system_prompt: \"You are a helpful assistant answering queries about Bhagavad Gita.\",\r\n    allow_search: false\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    // Append user message to conversation\r\n    const newMessages = [...messages, { sender: 'user', text: inputText }];\r\n    setMessages(newMessages);\r\n    setInputText('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Prepare the request body; here we send all messages as a list of strings\r\n      const requestBody = {\r\n        ...defaultParams,\r\n        messages: newMessages.map(m => m.text)\r\n      };\r\n\r\n      const response = await axios.post(\"http://localhost:5001/chat\", requestBody);\r\n      const botResponse = response.data.response || \"Sorry, I did not understand that.\";\r\n\r\n      setMessages([...newMessages, { sender: 'bot', text: botResponse }]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error.response ? error.response.data : error.message);\r\n      setMessages([...newMessages, { sender: 'bot', text: \"Error: Unable to get response.\" }]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-window\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} className={`message ${msg.sender}`}>\r\n            <p>{msg.text}</p>\r\n          </div>\r\n        ))}\r\n        {loading && <div className=\"message bot\"><p>Loading...</p></div>}\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message here...\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}